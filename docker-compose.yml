version: '3.8'

services:
  postgres:
    image: postgres:16
    environment:
      POSTGRES_DB: foodify
      POSTGRES_USER: foodify
      POSTGRES_PASSWORD: foodify
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  zookeeper:
    profiles: [platform]
    image: confluentinc/cp-zookeeper:7.4.3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"

  kafka:
    profiles: [platform]
    image: confluentinc/cp-kafka:7.4.3
    depends_on:
       zookeeper:
         condition: service_started
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  redis:
    profiles: [platform]
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes"] # enables persistence
    volumes:
      - redis_data:/data

  eureka:
    profiles: [platform]
    image: springcloud/spring-cloud-netflix-eureka-server:4.1.2
    ports:
      - "8761:8761"
    environment:
      SERVER_PORT: 8761
      EUREKA_INSTANCE_HOSTNAME: eureka
      EUREKA_SERVER_ENABLE_SELF_PRESERVATION: "false"
      EUREKA_CLIENT_REGISTER_WITH_EUREKA: "false"
      EUREKA_CLIENT_FETCH_REGISTRY: "false"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 10

  otel-collector:
    profiles: [platform]
    image: otel/opentelemetry-collector:0.99.0
    command:
      - "--config=/etc/otel/collector-config.yaml"
    ports:
      - "4317:4317"
      - "4318:4318"
    volumes:
      - ./docker/otel-collector-config.yaml:/etc/otel/collector-config.yaml:ro

  identity-service:
    profiles: [platform]
    build:
      context: ./services/identity-service
    ports:
      - "8085:8080"
    environment:
      SPRING_PROFILES_ACTIVE: default

  catalog-service:
    profiles: [platform]
    build:
      context: ./services/catalog-service
    ports:
      - "8086:8080"
    environment:
      SPRING_PROFILES_ACTIVE: default

volumes:
  postgres_data:
  redis_data:
